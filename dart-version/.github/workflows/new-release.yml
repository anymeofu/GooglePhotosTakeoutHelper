name: Build and publish new release on version tag
on:
  workflow_dispatch:
  push:
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*'

jobs:
  make-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Get clean tag name
        id: clean_tag
        run: echo "tag=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')" >> $GITHUB_OUTPUT
      - name: Get changelog
        run: python scripts/get_changelog.py --version ${{ steps.clean_tag.outputs.tag }} > ./body-file.txt
      #        Just in case changelogs won't work out
      #      - name: Get tag message
      #        id: tag_message
      #        run: echo "name=message=$(git tag -l --format='%(contents)' ${{ github.ref }})" >> $GITHUB_OUTPUT
      - name: Create GH-Release
        uses: softprops/action-gh-release@v2.2.2
        with:
          body_path: ./body-file.txt
          fail_on_unmatched_files: true
  build:
    strategy:
      matrix:
        include:
          # macOS
          - os: macos-13
            arch: x86_64
            runs-on: macos-13
          - os: macos-latest
            arch: arm64
            runs-on: macos-latest
          # Linux
          - os: ubuntu-22.04
            arch: x86_64
            runs-on: ubuntu-22.04
          - os: ubuntu-24.04-arm
            arch: arm64
            runs-on: ubuntu-24.04-arm
          # Windows
          - os: windows-latest
            arch: x86_64
            runs-on: windows-latest
          - os: windows-11-arm
            arch: arm64
            runs-on: windows-11-arm
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: dart-lang/setup-dart@v1.7.1
      - run: dart pub get
      - name: Get version
        id: version
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
          VERSION=$(powershell -Command "(Get-Content pubspec.yaml | Select-String '^version:').ToString().Split(':')[1].Trim()")
          else
          VERSION=$(grep '^version:' pubspec.yaml | head -n1 | cut -d' ' -f2)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Build exe
        id: build_exe
        shell: bash
        run: |
          version=${{ steps.version.outputs.version }}
          osname=${{ matrix.os }}
          # Normalize osname and append arch for output file
          if [[ "$osname" == "ubuntu-22.04" ]]; then
            osname=linux-x86_64
          elif [[ "$osname" == "ubuntu-24.04-arm" ]]; then
            osname=linux-arm64
          elif [[ "$osname" == "macos-latest" ]]; then
            osname=macos-arm64
          elif [[ "$osname" == "macos-13" ]]; then
            osname=macos-x86_64
          elif [[ "$osname" == "windows-latest" ]]; then
            osname=windows-x86_64
          elif [[ "$osname" == "windows-11-arm" ]]; then
            osname=windows-arm64
          fi
          outname=gpth-v$version-release-$osname
          if [[ "$osname" == windows-* ]]; then
            outname="$outname.exe"
          fi
          echo "outname=$outname" >> $GITHUB_OUTPUT
          dart compile exe bin/gpth.dart -o ./$outname
      - name: Upload exe as artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ steps.version.outputs.version }}-${{ steps.build_exe.outputs.outname }}
          path: ./${{ steps.build_exe.outputs.outname }}
          if-no-files-found: error
      # if linux, upload to aur
      #- name: Generate PKGBUILD
      #  if: matrix.os == 'ubuntu-22.04'
      #  run: ./scripts/gen-pkgbuild.bash ./gpth-${{ matrix.os }}-${{ matrix.arch }}
      #- name: Upload to AUR
      #  if: matrix.os == 'ubuntu-22.04'
      #  uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
      #  with:
      #    pkgname: gpth-bin
      #    pkgbuild: ./PKGBUILD
      #    commit_username: 'TheLastGimbus'
      #    commit_email: 'mateusz.soszynski@tuta.io'
      #    ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
      #    commit_message: ${{ steps.clean_tag.outputs.tag }}
      #    test: true
