name: Build Binaries

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  FLUTTER_VERSION: '3.24.5'
  DART_VERSION: '3.8.0'

jobs:
  # Build CLI binaries for multiple platforms
  build-cli:
    name: Build CLI (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            output-name: gpth-linux-x64
            output-ext: ''
          - os: windows-latest
            output-name: gpth-windows-x64
            output-ext: '.exe'
          - os: macos-latest
            output-name: gpth-macos-x64
            output-ext: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        sdk: ${{ env.DART_VERSION }}

    - name: Get dependencies
      run: dart pub get

    - name: Run tests
      run: dart test

    - name: Build CLI binary
      run: |
        dart compile exe bin/gpth_refactored.dart -o build/${{ matrix.output-name }}${{ matrix.output-ext }}

    - name: Upload CLI binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output-name }}
        path: build/${{ matrix.output-name }}${{ matrix.output-ext }}
        retention-days: 90

  # Build Flutter GUI for desktop platforms
  build-gui:
    name: Build GUI (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            build-args: --release
          - os: windows-latest
            platform: windows
            build-args: --release
          - os: macos-latest
            platform: macos
            build-args: --release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Setup Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

    - name: Enable desktop platforms
      run: |
        flutter config --enable-linux-desktop
        flutter config --enable-windows-desktop  
        flutter config --enable-macos-desktop

    - name: Get dependencies
      run: flutter pub get
      working-directory: lib/gui

    - name: Build Flutter GUI
      run: flutter build ${{ matrix.platform }} ${{ matrix.build-args }}
      working-directory: lib/gui

    - name: Package Linux build
      if: matrix.platform == 'linux'
      run: |
        cd lib/gui/build/linux/x64/release/bundle
        tar -czf ../../../../../gpth-gui-linux-x64.tar.gz .

    - name: Package Windows build
      if: matrix.platform == 'windows'
      run: |
        cd lib/gui/build/windows/x64/runner/Release
        7z a ../../../../../gpth-gui-windows-x64.zip .

    - name: Package macOS build
      if: matrix.platform == 'macos'
      run: |
        cd lib/gui/build/macos/Build/Products/Release
        zip -r ../../../../../gpth-gui-macos-x64.zip *.app

    - name: Upload GUI artifact (Linux)
      if: matrix.platform == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: gpth-gui-linux-x64
        path: gpth-gui-linux-x64.tar.gz
        retention-days: 90

    - name: Upload GUI artifact (Windows)
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: gpth-gui-windows-x64
        path: gpth-gui-windows-x64.zip
        retention-days: 90

    - name: Upload GUI artifact (macOS)
      if: matrix.platform == 'macos'
      uses: actions/upload-artifact@v4
      with:
        name: gpth-gui-macos-x64
        path: gpth-gui-macos-x64.zip
        retention-days: 90

  # Create release with all binaries
  release:
    name: Create Release
    needs: [build-cli, build-gui]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display artifact structure
      run: ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## Google Photos Takeout Helper ${{ github.ref_name }}
          
          ### CLI Binaries
          - **Linux x64**: `gpth-linux-x64`
          - **Windows x64**: `gpth-windows-x64.exe`  
          - **macOS x64**: `gpth-macos-x64`
          
          ### GUI Applications
          - **Linux x64**: `gpth-gui-linux-x64.tar.gz`
          - **Windows x64**: `gpth-gui-windows-x64.zip`
          - **macOS x64**: `gpth-gui-macos-x64.zip`
          
          ### Installation
          
          **CLI Usage:**
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x gpth-*`
          3. Run: `./gpth-* --help`
          
          **GUI Usage:**
          1. Download and extract the GUI package for your platform
          2. Run the application directly
          
          ### Requirements
          - ExifTool (recommended for best metadata handling)
          - Sufficient disk space (approximately 2x your takeout size)
          
          ---
          **Note**: This is an automated release generated from tag ${{ github.ref_name }}
        files: |
          artifacts/gpth-linux-x64/gpth-linux-x64
          artifacts/gpth-windows-x64/gpth-windows-x64.exe
          artifacts/gpth-macos-x64/gpth-macos-x64
          artifacts/gpth-gui-linux-x64/gpth-gui-linux-x64.tar.gz
          artifacts/gpth-gui-windows-x64/gpth-gui-windows-x64.zip
          artifacts/gpth-gui-macos-x64/gpth-gui-macos-x64.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Matrix test job to validate on multiple Dart versions
  test-compatibility:
    name: Test Compatibility (Dart ${{ matrix.dart-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dart-version: ['3.8.0', 'stable']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Dart
      uses: dart-lang/setup-dart@v1
      with:
        sdk: ${{ matrix.dart-version }}

    - name: Get dependencies
      run: dart pub get

    - name: Analyze code
      run: dart analyze

    - name: Check formatting
      run: dart format --set-exit-if-changed .

    - name: Run tests
      run: dart test --reporter=github

    - name: Test CLI compilation
      run: dart compile exe bin/gpth_refactored.dart -o test-binary